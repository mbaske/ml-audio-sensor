using System;

namespace MBaske.Sensors
{
    /// <summary>
    /// Stores audio samples generated by <see cref="AudioSensorComponent.SampleAudio"/>.
    /// </summary>
    public class AudioBuffer
    {
        // We're calling this "channels" to be consistent with TensorShape channels.
        protected int m_TotalChannels;
        protected int m_SignalChannels;
        protected int m_CurrentChannel;
        protected int m_SampleCount;
        protected float[,] m_Samples;

        /// <summary>
        /// Length of the buffer in update / sampling steps.
        /// Multiply with update delta time to get length in seconds.
        /// </summary>
        public int Length => m_TotalChannels / m_SignalChannels;

        /// <summary>
        /// Initializes the buffer.
        /// </summary>
        /// <param name="shape">Observation shape of the audio sensor.</param>
        public AudioBuffer(SensorObservationShape shape)
        {
            m_TotalChannels = shape.Channels;
            m_SignalChannels = shape.SignalChannels;
            m_Samples = new float[m_TotalChannels, shape.Width * shape.Height];
        }

        /// <summary>
        /// Clears the buffer, resets the current channel and sample count.
        /// </summary>
        public void Clear()
        {
            Array.Clear(m_Samples, 0, m_Samples.Length);
            m_CurrentChannel = 0;
            m_SampleCount = 0;
        }

        /// <summary>
        /// Sets the current channel, resets the sample count.
        /// <paramref name="samplingStepCount"/>Sampling step relative to buffer <see cref="Length"/></param>
        /// </summary>
        public void SetChannel(int samplingStepCount)
        {
            m_CurrentChannel = samplingStepCount * m_SignalChannels;
            m_SampleCount = 0;
        }

        /// <summary>
        /// Adds audio sample(s) for one or more signal channels.
        /// <param name="signalChannelValues">Sample values for each signal channel.</param>
        /// </summary>
        public void AddSample(params float[] signalChannelValues)
        {
            for (int i = 0; i < m_SignalChannels; i++)
            {
                m_Samples[m_CurrentChannel + i, m_SampleCount] = signalChannelValues[i];
            }
            m_SampleCount++;
        }

        /// <summary>
        /// Reads the buffered audio samples from oldest to newest.
        /// <param name="observationChannel">Relative channel number, 0: oldest samples</param>
        /// <param name="sampleIndex">Index of the sample.</param>
        /// </summary>
        public float GetSample(int observationChannel, int sampleIndex)
        {
            int bufferChannel = (m_CurrentChannel + m_SignalChannels + observationChannel) % m_TotalChannels;
            return m_Samples[bufferChannel, sampleIndex];
        }
    }
}
